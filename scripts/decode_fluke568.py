#/usr/bin/env python2.7
# -*- coding: UTF-8 -*-
"""
    FLUKE 568 experimental driver.

   
    @author Daniel Duke <daniel.duke@monash.edu>
    @copyright (c) 2019 LTRAC
    @license GPL-3.0+
    @version 0.0.1
    @date 01/03/2019
        __   ____________    ___    ______
       / /  /_  ____ __  \  /   |  / ____/
      / /    / /   / /_/ / / /| | / /
     / /___ / /   / _, _/ / ___ |/ /_________
    /_____//_/   /_/ |__\/_/  |_|\__________/

    Laboratory for Turbulence Research in Aerospace & Combustion (LTRAC)
    Monash University, Australia
"""

# Data stream includes:
# - IR max, live, min
# - avg temp
# when thermocouple inserted also add:
# - thermocouple temp
# - difference 

"""
    sample with thermocouple streaming, temp=33.0/32.1degC
"""
a=(
'0x823035002074a604034220c82c05429304b8586b549ed60805ffff7f3f203c19060042307ca0fd410730e0ef1942207008b904422010fdd80940000001000000',\
'0x823035002042a504034220cc2c0542b704b5966b549ed60805ffff7f3f20de26060042307ca0fd410730e0ef1942206a08b604422010fdd80940000001000000',\
'0x8230350020e4a004034220a22c0542ae0481d36b549ed60805ffff7f3f20a02d060042307ca0fd410730e0ef1942202008b404422010fdd80940000001000000',\
'0x8230350020249c04034220b42c0542d2047e116c549ed60805ffff7f3f20b83b060042307ca0fd410730e0ef1942207808b104422010fdd80940000001000000',\
'0x8230350020143a04034220c82c0542c9044a4e6c549ed60805ffff7f3f20b241060042307ca0fd410730e0ef1942200008a404422010fdd80940000001000000',\
'0x82303500205e3804034220e02c0542c004168b6c549ed60805ffff7f3f20ea39060042307ca0fd410730e0ef194220a8089704422010fdd80940000001000000',\
'0x8230350020f037040342200c2d0542e40413c96c549ed60805ffff7f3f20f838060042307ca0fd410730e0ef19422056088904422010fdd80940000001000000',\
'0x8230350020a23804034220242d0542db04df056d549ed60805ffff7f3f20a03c060042307ca0fd410730e0ef19422020088004422010fdd80940000001000000',\
'0x8230350020a03804034220222d0542ff04dc436d549ed60805ffff7f3f20dc39060042307ca0fd410730e0ef194220ac087704422010fdd80940000001000000',\
'0x8230350020783d04034220282d0542f604a8806d549ed60805ffff7f3f201a32060042307ca0fd410730e0ef194220b8087004422010fdd80940000001000000',\
'0x8230350020263e040342203e2d05421a04a6be6d549ed60805ffff7f3f20d82f060042307ca0fd410730e0ef194220de086a04422010fdd80940000001000000',\
'0x8230350020463c040342202c2d0542110472fb6d549ed60805ffff7f3f208032060042307ca0fd410730e0ef194220a4086304422010fdd80940000001000000',\
'0x8230350020803f04034220642d054235046f396e549ed60805ffff7f3f20fa2d060042307ca0fd410730e0ef1942202c085f04422010fdd80940000001000000',\
'0x82303500200c3d04034220582d05422c043b766e549ed60805ffff7f3f209222060042307ca0fd410730e0ef1942208e085b04422010fdd80940000001000000')


"""
    sample without thermocouple, hold value, 33.3degC all values
"""
b=(
'0x8230350020dc54050342209c3505425804d34490549ed60805ffff7f3f248b4b06844530aa52054207304a58054220f208540542200000b4093b000001000000',\
'0x8230350020dc54050342209c3505427c04d08290549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c35054273049cbf90549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c350542970499fd90549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c3505428e04653a91549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c350542b204627891549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c350542a9042eb591549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c350542cd042bf391549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c350542c404f72f92549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c350542e804f46d92549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c350542df04c0aa92549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c350542d6048ce792549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c350542fa04892593549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c3505421e04876393549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c350542150453a093549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000',\
'0x8230350020dc54050342209c3505420c041fdd93549ed60805ffff7f3f248b4b06844530aa52054207304a58054220ee08540542200000b4093b000001000000')


import struct, binascii, sys

idx = [i for i in xrange(len(a[1])) if a[1][i] != a[0][i]]
idx.insert(0,0)
for n in range(len(a)):
    for i in range(len(idx)-1):
        sys.stdout.write( a[n][idx[i]:idx[i+1]] )
        sys.stdout.write( ' ' )
    print ""
exit()

for x in a:
    #y=binascii.hexlify(x)
    print  binascii.hexlify(x)#.replace('03',' ' )

    #z = struct.unpack('<32q4b',y)
    #print z
